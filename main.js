// Please copy and paste your GitHub Repo on line 2 (optional)
// <GitHub Repo>

// JavaScript Assessment Rubric: https://generation.instructure.com/courses/2342/assignments/143783

// Codecademy: https://www.codecademy.com/paths/front-end-engineer-career-path/tracks/fecp-javascript-syntax-part-iii/modules/fecp-challenge-project-find-your-hat/projects/find-your-hat

// Please break down your thinking process step-by-step (mandatory)
// step 1 :
/* ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÄ‡∏Å‡∏° find your hat : ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‡∏Ç‡∏ß‡∏≤ ‡∏ö‡∏ô ‡∏•‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏Å(hat)‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏´‡∏•‡∏∏‡∏°(hole)‡∏Ç‡∏ß‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∂‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏∏‡∏° ‡∏´‡∏≤‡∏Å‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏∏‡∏° ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡πÅ‡∏û‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏û‡πâ ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏à‡∏≠‡∏´‡∏°‡∏ß‡∏Å(hat) ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ä‡∏ô‡∏∞
 1.‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ prompt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ú‡πà‡∏≤‡∏ô Node 
 2.‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ hat ‡∏Ñ‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏´‡∏°‡∏ß‡∏Å ,‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ hole ‡∏Ñ‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏´‡∏•‡∏∏‡∏°,‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ fieldCharacter ‡∏Ñ‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô,‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ pathCharacter ‡∏Ñ‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô */



// JS Assessment: Find your hat //

const prompt = require('prompt-sync')({ sigint: true }); // This sends a SIGINT, or ‚Äúsignal interrupt‚Äù message indicating that a user wants to exit a program by press Crtl+c
// const clear = require('clear-screen');//every turn clear the screen that meant you will not get new field in time you choose the direction
const hat = 'üëí';
const hole = 'üî∫';
const fieldCharacter = '‚óΩÔ∏è';
const pathCharacter = 'üò∫';
const clear = require("clear-screen");

class Field {
  constructor(field = [[]]) {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏ç‡πâ‡∏≤‡πÇ‡∏î‡∏¢ ‡πÅ‡∏ô‡∏ß‡πÅ‡∏Å‡∏ô x = 0, ‡πÅ‡∏ô‡∏ß‡πÅ‡∏Å‡∏ô y = 0
    this.field = field;
    this.positionX = 0;
    this.positionY = 0;


    this.field[0][0] = pathCharacter;    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á pathCharacter ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á x=0,y=0
    this.field[5][5] = hat;     // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á hat ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á x=5,y=5
  };

  static generateField(height, width, percentage = 0.1){
    const field = new Array(height).fill(0).map(e => new Array(width));
    for(let y = 0; y < height; y++){
        for(let x = 0; x < width; x++){
            const prob = Math.random();
            field[y][x] = prob > percentage ? fieldCharacter : hole
        }
    }
    return field;
    
  }
//   ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô playGame() ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
    playGame(){
        let playing = true;
        while(playing){
            this.print();
            this.ask();
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏ç‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡πÅ‡∏û‡πâ‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°
            if(!this.isInMaps()){
                console.log('You are out of the map.')
                playing = false;
                break;
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏∏‡∏° ‡πÉ‡∏´‡πâ‡πÅ‡∏û‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°        
            }else if(this.isHole()){
                console.log('You are LOSE.');
                playing = false;
                break;
         // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏´‡∏°‡∏ß‡∏Å ‡πÉ‡∏´‡πâ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°         
            }else if(this.isHat()){
                console.log('You are win!')
                playing = false;
                break;
            }
            this.field[this.positionY][this.positionX] = pathCharacter
        }
    }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô ask() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô
  ask() {
    const answer = prompt('Which way ?').toUpperCase(); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î.toUpperCase() ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° case ‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô
    switch(answer) {
        // 'W' ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô
        case 'W':
            this.positionY -= 1;
            break;
        // 'S' ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á
        case 'S':
            this.positionY += 1;
            break;
        // 'A' ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
        case 'A':
            this.positionX -=1;
            break;
        // 'D' ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤
        case 'D':
            this.positionX +=1 ;
            break;
        // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏õ‡∏à‡∏≤‡∏ÅW S A D  ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô ask()‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        default:
            console.log('Enter W S A D');
            this.ask();
            break;
    }
  }
  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô isInMaps() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô map ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isInMaps(){
    return (
        this.positionY >= 0 &&
        this.positionX >= 0 &&
        this.positionY < this.field.length &&
        this.positionX < this.field[0].length
    );
  }
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô isHat() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö hat ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isHat(){
    return this.field[this.positionY][this.positionX] === hat;
  }
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô isHole() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö hole ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isHole(){
    return this.field[this.positionY][this.positionX] === hole;
  }



  //print field method to make it eaier 
  print() {
      // your print map code here
clear();
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á field ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞ join ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á array
    this.field.forEach(element => console.log(element.join('')))
  }        
}
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î class ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‡∏à‡∏≤‡∏Å class Field
const myField = new Field(Field.generateField(10, 10, 0.2));
// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô playGame() ‡∏ú‡πà‡∏≤‡∏ô myField
myField.playGame();